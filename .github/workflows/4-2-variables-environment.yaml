name: Variables_Environment
description: "This workflow demonstrates the use of environment variables, outputs, and states in GitHub Actions."

on:
  workflow_dispatch:

jobs:
  use_environment_job: #This is useful if the variable is going to be used across an Action but the variable is set dynamically in a step.
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variable Step 1
        run: echo "MY_ENVIRONMENT_VARIABLE=$(date +'%T')" >> $GITHUB_ENV

      - name: Print Environment Variable Step 2
        run: echo "The value of MY_ENVIRONMENT_VARIABLE is => $MY_ENVIRONMENT_VARIABLE"

  use_output_job: #Outputs are useful when you want to get data from specific steps.
    runs-on: ubuntu-latest
    needs: use_environment_job
    steps:
      - name: Set Output Variable Step 1
        id: output_variable_step_1
        run: echo "MY_OUTPUT_VARIABLE=color green" >> "$GITHUB_OUTPUT"
     
      - name: Print Output Variable Step 2
        env:
          MY_OUTPUT_VARIABLE_STEP_2: ${{ steps.output_variable_step_1.outputs.MY_OUTPUT_VARIABLE }}
        run: echo "The value of MY_OUTPUT_VARIABLE_STEP_2 is => $MY_OUTPUT_VARIABLE_STEP_2"
  
  use_state_job: #States they are variables that can be shared between execution files. E.G.: In the '.js' files you can get the state.
    runs-on: ubuntu-latest
    needs: use_output_job
    steps:
      - name: Set State Variable Step 1
        id: state_variable_step_1
        run: echo "MY_STATE_VARIABLE=custom state value" >> $GITHUB_STATE

      - name: Print State Variable Step 2
        env:
          MY_STATE_VARIABLE_STEP_2: ${{ steps.state_variable_step_1.outputs.MY_STATE_VARIABLE }}
        run: echo "The value of MY_STATE_VARIABLE_STEP_2 is => $MY_STATE_VARIABLE_STEP_2"
          